/**
 * LISENCE MIT.
 * Copyright luckydrq<drqzju@gmail.com>
 *
 * - lib/character_data_0E.js
 * CharacterData0E
 */
var assert = require('assert');
var Character = require('./character');

var X = (
  '\000\020\020\020\040\040\040\040\060\060\060\060\060\060\060\100\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040' +
  '\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040').split('');

var Y = (
  '\000\002\002\002\002\002\002\002\002\002\002\002\002\002\002\002\004\004\004' +
  '\004\004\004\004\004\004\004\004\004\004\004\004\004\002\002\002\002\002\002' +
  '\002\002\002\002\002\002\002\002\002\002\006\006\006\006\006\006\006\006\006' +
  '\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\002\002\002\002' +
  '\002\002\002\002').split('');
var A = new Array(8);
var A_DATA = '\u7800\000\u4800\u1010\u7800\000\u7800\000\u4800\u1010\u4800\u1010\u4000\u3006\u4000\u3006';
var B = '\000\000\000\000\000\000\000\000'.split('');
var data = A_DATA.split('');
assert(data.length == (8 * 2));
var i = 0,
  j = 0;
while (i < (8 * 2)) {
  var entry = data[i++] << 16;
  A[j++] = entry | data[i++];
}

function CharacterData0E() {}

var proto = CharacterData0E.prototype;

proto.getProperties = function(ch) {
  var offset = ch;
  var props = A[Y[X[offset >> 5] | ((offset >> 1) & 0xF)] | (offset & 0x1)];
  return props;
};

proto.getPropertiesEx = function(ch) {
  var offset = ch;
  var props = B[Y[X[offset >> 5] | ((offset >> 1) & 0xF)] | (offset & 0x1)];
  return props;
};

proto.isOtherLowercase = function(ch) {
  var props = this.getPropertiesEx(ch);
  return (props & 0x0001) !== 0;
};

proto.isOtherUppercase = function(ch) {
  var props = this.getPropertiesEx(ch);
  return (props & 0x0002) !== 0;
};

proto.isOtherAlphabetic = function(ch) {
  var props = this.getPropertiesEx(ch);
  return (props & 0x0004) !== 0;
};

proto.isIdeographic = function(ch) {
  var props = this.getPropertiesEx(ch);
  return (props & 0x0010) !== 0;
};

proto.getType = function(ch) {
  var props = this.getProperties(ch);
  return (props & 0x1F);
};

proto.isJavaIdentifierStart = function(ch) {
  var props = this.getProperties(ch);
  return ((props & 0x00007000) >= 0x00005000);
};

proto.isJavaIdentifierPart = function(ch) {
  var props = this.getProperties(ch);
  return ((props & 0x00003000) !== 0);
};

proto.isUnicodeIdentifierStart = function(ch) {
  var props = this.getProperties(ch);
  return ((props & 0x00007000) === 0x00007000);
};

proto.isUnicodeIdentifierPart = function(ch) {
  var props = this.getProperties(ch);
  return ((props & 0x00001000) !== 0);
};

proto.isIdentifierIgnorable = function(ch) {
  var props = this.getProperties(ch);
  return ((props & 0x00007000) === 0x00001000);
};

proto.toLowerCase = function(ch) {
  var mapChar = ch;
  var val = this.getProperties(ch);

  if ((val & 0x00020000) !== 0) {
    var offset = val << 5 >> (5 + 18);
    mapChar = ch + offset;
  }
  return mapChar;
};

proto.toUpperCase = function(ch) {
  var mapChar = ch;
  var val = this.getProperties(ch);

  if ((val & 0x00010000) !== 0) {
    var offset = val << 5 >> (5 + 18);
    mapChar = ch - offset;
  }
  return mapChar;
};

proto.toTitleCase = function(ch) {
  var mapChar = ch;
  var val = this.getProperties(ch);

  if ((val & 0x00008000) !== 0) {
    // There is a titlecase equivalent.  Perform further checks:
    if ((val & 0x00010000) === 0) {
      // The character does not have an uppercase equivalent, so it must
      // already be uppercase; so add 1 to get the titlecase form.
      mapChar = ch + 1;
    } else if ((val & 0x00020000) === 0) {
      // The character does not have a lowercase equivalent, so it must
      // already be lowercase; so subtract 1 to get the titlecase form.
      mapChar = ch - 1;
    }
    // else {
    // The character has both an uppercase equivalent and a lowercase
    // equivalent, so it must itself be a titlecase form; return it.
    // return ch;
    //}
  } else if ((val & 0x00010000) !== 0) {
    // This character has no titlecase equivalent but it does have an
    // uppercase equivalent, so use that (subtract the signed case offset).
    mapChar = this.toUpperCase(ch);
  }
  return mapChar;
};

proto.digit = function(ch, radix) {
  var value = -1;
  if (radix >= Character.MIN_RADIX && radix <= Character.MAX_RADIX) {
    var val = this.getProperties(ch);
    var kind = val & 0x1F;
    if (kind == Character.DECIMAL_DIGIT_NUMBER) {
      value = ch + ((val & 0x3E0) >> 5) & 0x1F;
    } else if ((val & 0xC00) == 0x00000C00) {
      // Java supradecimal digit
      value = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
    }
  }
  return (value < radix) ? value : -1;
};

proto.getNumericValue = function(ch) {
  var val = this.getProperties(ch);
  var retval = -1;

  switch (val & 0xC00) {
    default: // cannot occur
    case (0x00000000): // not numeric
      retval = -1;
      break;
    case (0x00000400): // simple numeric
      retval = ch + ((val & 0x3E0) >> 5) & 0x1F;
      break;
    case (0x00000800): // "strange" numeric
      retval = -2;
      break;
    case (0x00000C00): // Java supradecimal
      retval = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
      break;
  }
  return retval;
};

proto.isWhitespace = function(ch) {
  var props = this.getProperties(ch);
  return ((props & 0x00007000) === 0x00004000);
};

proto.getDirectionality = function(ch) {
  var val = this.getProperties(ch);
  var directionality = (val & 0x78000000) >> 27;
  if (directionality == 0xF ) {
    directionality = Character.DIRECTIONALITY_UNDEFINED;
  }
  return directionality;
};

proto.isMirrored = function(ch) {
  var props = this.getProperties(ch);
  return ((props & 0x80000000) !== 0);
};

exports.instance = new CharacterData0E();
